# -*- coding: utf-8 -*-
"""TASK_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YZBWx4jxSXLnaf4KkrpjEGR92sZw5Mhm
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import LabelEncoder
import warnings

warnings.filterwarnings('ignore')

data=pd.read_csv("car data.csv")
data.head()

data.isnull().sum()

data.dtypes

data.describe

data.info()

plt.figure(figsize=(10,6))
sns.histplot(data['Selling_Price'],bins=30,kde=True)
plt.title('Distribution of selling price')
plt.xlabel("Selling_price")
plt.ylabel("Frequency")
plt.show()

sns.pairplot(data, vars=['Year', 'Present_Price', 'Driven_kms','Selling_Price'],palette='Dark2')
plt.show()

sns.pairplot(data, hue='Year', palette='Dark2')

sns.heatmap(data.corr(),annot=True,cmap='coolwarm',fmt='.2f',linewidths=0.5)
plt.title("Correltaion Matrix")
plt.show()

plt.figure(figsize=(12,6))
sns.boxplot(x='Fuel_Type',y='Selling_Price',data=data)
plt.title("Selling Price by Fuel Type")
plt.show()

plt.figure(figsize=(12,6))
sns.countplot(x='Selling_type',data=data)
plt.title('Count of Selling Types')
plt.show()

sns.pairplot(data, vars=['Year','Present_Price', 'Driven_kms','Selling_Price'],hue='Fuel_Type')
plt.show()

plt.figure(figsize=(14,7))
sns.violinplot(x='Selling_type',y='Selling_Price',hue='Transmission',data=data,split=True)
plt.title("Selling price distribution by selling type and transmission")
plt.show()

plt.figure(figsize=(12,9))
sns.boxplot(x='Fuel_Type',y='Present_Price',data=data)
plt.title("Present Price Distribution by Fuel Type")
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import MinMaxScaler

features=['Year', 'Present_Price','Driven_kms','Fuel_Type','Selling_type','Transmission']
target='Selling_Price'
X=data[features]
y=data[target]
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
numeric_features=['Year','Present_Price','Driven_kms']
numeric_transformer=Pipeline(steps=[('scaler',StandardScaler())])
categorical_features=['Fuel_Type','Selling_type','Transmission']
categorical_transformer=Pipeline(steps=[('onehot',OneHotEncoder(handle_unknown='ignore'))])
preprocessor=ColumnTransformer(
    transformers=[
        ('num',numeric_transformer,numeric_features),
        ('cat',categorical_transformer,categorical_features)
    ]
)
model=Pipeline(steps=[('preprocessor',preprocessor),('regressor',RandomForestRegressor(random_state=42))])
model.fit(X_train,y_train)

y_pred=model.predict(X_test)
mse=mean_squared_error(y_test,y_pred)
r2=r2_score(y_test,y_pred)
print(f'Mean Squared Error:{mse}')
print(f'R-squared:{r2}')

plt.scatter(y_test,y_pred)
plt.plot(y_test,y_test,'r')